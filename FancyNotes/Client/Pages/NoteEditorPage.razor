@using System.Text.Json;
@using System.Text.Json.Nodes;
@using FancyNotes.Client.Services.Contracts;
@using FancyNotes.Infrastructure;
@using FancyNotes.Shared;
@attribute [Authorize]
@page "/NoteEditor/{noteId?}"


<MudButton Variant="Variant.Filled" OnClick="SaveNoteContent">Сохранить</MudButton>

<BlazoredTextEditor @ref="@QuillNative"
                    Placeholder="Напишите что-нибудь хорошее...">
    <ToolbarContent>
        <span class="ql-formats">
            <select class="ql-size">
                <option value="small"></option>
                <option selected=""></option>
                <option value="large"></option>
                <option value="huge"></option>
            </select>
        </span>
        <span class="ql-formats">
            <button class="ql-bold"></button>
            <button class="ql-italic"></button>
            <button class="ql-underline"></button>
            <button class="ql-strike"></button>
        </span>
        <span class="ql-formats">
            <select class="ql-color"></select>
            <select class="ql-background"></select>
        </span>
        <span class="ql-formats">
            <button class="ql-list" value="ordered"></button>
            <button class="ql-list" value="bullet"></button>
            <button class="ql-indent" value="-1"></button>
            <button class="ql-indent" value="+1"></button>
            <select class="ql-align">
                <option selected=""></option>
                <option value="center"></option>
                <option value="right"></option>
                <option value="justify"></option>
            </select>
        </span>
        <span class="ql-formats">
            <button class="ql-link"></button>
        </span>
    </ToolbarContent>
</BlazoredTextEditor>


@code {
    [Parameter]
    public string? noteId { get; set; }
    [Inject] ILocalStorageService localStorageService { get; set; }
    [Inject] IJSRuntime jsRuntime { get; set; }
    [Inject] INoteClientService NoteClientService { get; set; }
    [Inject] IUserClientService UserClientService { get; set; }

    private Note note { get; set; }
    private User noteOwner { get; set; }
    BlazoredTextEditor QuillNative;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadUserInfo();
        }
        catch
        {
            Console.WriteLine("Failed to load user info...");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (noteId != null)
            {
                note = await NoteClientService.GetNote(Convert.ToInt32(noteId));
                await QuillNative.LoadContent(note.NoteBody);
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task SaveNoteContent()
    {
        var content = await QuillNative.GetContent();
        if (note != null)
        {
            note.Title = "test";
            note.NoteBody = content;
            note.User = noteOwner;
            note.ColorFromRGB = "";
            note = await NoteClientService.UpdateNote(note);
        }
        else
        {
            note = new Note();
            note.Title = "test";
            note.NoteBody = content;
            note.CreationDateTime = DateTime.Now;
            note.ColorFromRGB = "";
            note.UserId = noteOwner.Id;
            note.User = noteOwner;
            note = await NoteClientService.CreateNote(note);
        }
        Console.WriteLine(content.ToString());
    }

    private async Task LoadUserInfo()
    {
        UserSession storagedData = await localStorageService.GetItemAsync<UserSession>("UserSession");
        noteOwner = await UserClientService.GetUser(storagedData.Id);
    }

}

