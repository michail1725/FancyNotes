@using System.Text.Json;
@using System.Text.Json.Nodes;
@using FancyNotes.Client.Services.Contracts;
@using FancyNotes.Infrastructure;
@using FancyNotes.Shared;
@using MudBlazor.Utilities;
@attribute [Authorize]
@page "/NoteEditor/{noteId?}"

<style>
    body {
        background-color: @_pickerColor.Value;
        opacity: 90%
    }
</style>

<MudStack Row="true" AlignItems="AlignItems.Stretch">
    <MudStack Row="true" AlignItems="AlignItems.Stretch">
        <MudTextField @bind-Value="TextValue" Label="Заголовок заметки" Variant="Variant.Outlined"></MudTextField>
        <MudIconButton Icon="@Icons.Material.Filled.ColorLens" Color="Color.Dark" Size="Size.Medium" OnClick="@ToggleOpen">@(_isOpen ? "Close" : "Open")</MudIconButton>
            <MudPopover Open="_isOpen" OverflowBehavior="OverflowBehavior.FlipAlways" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Paper="false">
                <MudItem md="8" Class="d-flex justify-center">
                    <MudColorPicker Value="_pickerColor" DisableToolbar="false" DisableAlpha="true" DisableColorField="false" DisablePreview="false" DisableSliders="true" DisableInputs="true" DisableModeSwitch="true" ColorPickerMode="ColorPickerMode.HEX" PickerVariant="PickerVariant.Static" />
                </MudItem>
            </MudPopover>
    </MudStack>
    <MudStack Row="true" AlignItems="AlignItems.Stretch">
        <MudButton Variant="Variant.Outlined" Color="Color.Error">Удалить заметку</MudButton>
        <MudButton Variant="Variant.Filled" OnClick="SaveNoteContent">Сохранить</MudButton>
    </MudStack>
</MudStack>


<BlazoredTextEditor @ref="@QuillNative"
                    Placeholder="Здесь можно чего-нибудь написать...">
    <ToolbarContent>
        <span class="ql-formats">
            <select class="ql-size">
                <option value="small"></option>
                <option selected=""></option>
                <option value="large"></option>
                <option value="huge"></option>
            </select>
        </span>
        <span class="ql-formats">
            <button class="ql-bold"></button>
            <button class="ql-italic"></button>
            <button class="ql-underline"></button>
            <button class="ql-strike"></button>
        </span>
        <span class="ql-formats">
            <select class="ql-color"></select>
            <select class="ql-background"></select>
        </span>
        <span class="ql-formats">
            <button class="ql-list" value="ordered"></button>
            <button class="ql-list" value="bullet"></button>
            <button class="ql-indent" value="-1"></button>
            <button class="ql-indent" value="+1"></button>
            <select class="ql-align">
                <option selected=""></option>
                <option value="center"></option>
                <option value="right"></option>
                <option value="justify"></option>
            </select>
        </span>
    </ToolbarContent>
</BlazoredTextEditor>


    @code {
    [Parameter]
    public string? noteId { get; set; }
    [Inject] ILocalStorageService localStorageService { get; set; } = default!;
    [Inject] IJSRuntime jsRuntime { get; set; } = default!; 
    [Inject] INoteClientService NoteClientService { get; set; } = default!;
    [Inject] IUserClientService UserClientService { get; set; } = default!;

    private Note note { get; set; } = default!; 
    private User noteOwner { get; set; } = default!;
    public string TextValue { get; set; } = default!;
    BlazoredTextEditor QuillNative = default!;
    public MudColor _pickerColor = "#ffffffff";

    public bool _isOpen = false;

    public void ToggleOpen()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadUserInfo();
        }
        catch
        {
            Console.WriteLine("Failed to load user info...");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (noteId != null)
            {
                note = await NoteClientService.GetNote(Convert.ToInt32(noteId));
                _pickerColor = new MudColor(note.ColorFromRGB);
                await QuillNative.LoadContent(note.NoteBody);
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task SaveNoteContent()
    {
        var content = await QuillNative.GetContent();
        if (note != null)
        {
            note.Title = "test";
            note.NoteBody = content;
            note.User = noteOwner;
            note.ColorFromRGB = _pickerColor.Value;
            note = await NoteClientService.UpdateNote(note);
        }
        else
        {
            note = new Note();
            note.Title = "test";
            note.NoteBody = content;
            note.CreationDateTime = DateTime.Now;
            note.ColorFromRGB = _pickerColor.Value;
            note.UserId = noteOwner.Id;
            note.User = noteOwner;
            note = await NoteClientService.CreateNote(note);
        }
        Console.WriteLine(content.ToString());
    }

    private async Task LoadUserInfo()
    {
        UserSession storagedData = await localStorageService.GetItemAsync<UserSession>("UserSession");
        noteOwner = await UserClientService.GetUser(storagedData.Id);
    }

}

