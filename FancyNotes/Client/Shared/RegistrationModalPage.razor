@using System.ComponentModel.DataAnnotations
@using FancyNotes.Shared
@inject IModalService ModalService
@inject HttpClient Http



<EditForm Model="@registrationModel" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="First name" HelperText="Max. 8 characters"
                                  @bind-Value="registrationModel.Username" For="@(() => registrationModel.Username)" />
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="registrationModel.Password" For="@(() => registrationModel.Password)" InputType="InputType.Password" />
                    <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                                  @bind-Value="registrationModel.Password2" For="@(() => registrationModel.Password2)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>


@code {

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    async Task Cancel() => await BlazoredModal.CancelAsync();

    RegisterAccountForm registrationModel = new RegisterAccountForm();
    bool success;

    public class RegisterAccountForm
    {
        [Required]
        //[StringLength(8, ErrorMessage = "Name length can't be more than 8.")]
        public string Username { get; set; }

        [Required]
        //[StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }

    }

    private async void OnValidSubmit(EditContext context)
    {
        //проверка на существующий username
        User newUser = new User();
        using (var msg = await Http.PostAsJsonAsync<User>(
            $"/api/users/registrate?userName={registrationModel.Username}&password={registrationModel.Password}", newUser, System.Threading.CancellationToken.None)
        )
        {
            if (msg.IsSuccessStatusCode)
            {
                //await msg.Content.ReadFromJsonAsync<User>();
                await BlazoredModal.CloseAsync(ModalResult.Ok(true));
                StateHasChanged();
            }
        }
        
    }

}
